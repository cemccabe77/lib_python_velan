# __author__ = "Vincent Touache"
# __copyright__ = "Copyright 2015, Vincent Touache"
# __version__ = "1.0.1"
# __email__ = "vincent.touache@gmail.com"
# __status__ = "Production"

"""
module to deal with controllers hierarchies in maya

TODO :
add tagParent
Controllers library. The main object is Control, used to create and manipulate
controllers within maya
Control: generic class to create a control object, used as controllers (nurbs curves) in the rig
mirrorCtlShapes: mirrors in -x axis the shape of the given nurbsCurve
"""
from six import string_types

import logging, json, re
from collections import OrderedDict
import configparser
from maya import cmds
from maya.api.OpenMaya import *
import math

'''
testVar = rdCtl.Control('_endCtl', shape='circle', color='lightBlue', size=1)
testVar.color='fluoGreen'
testVar.depth=3
testVar.match='locator1'
testVar.lineWidth=1

cmds.select(testVar.ctls)
cmds.select(testVar.ctlShapes)
cmds.select(testVar.topCtl)
cmds.select(testVar.rootCtl)
cmds.select(testVar.jt)
cmds.select(testVar.grp)
'''
class Nc(dict):
    def __getitem__(self, key):
        return key
        super(Nc, self).__getitem__(key)
        return key
NC = Nc()

# logging
LOG = logging.getLogger(__name__)
LOG.setLevel(logging.INFO)



SHAPES = {
    'arrow': {"degree": 1, "points": [(-0.55, 0, 0.15), (-0.55, 0, -0.15), (0.25, 0, -0.08), (0.25, 0, -0.25), (.5, 0, 0), (0.25, 0, 0.25), (0.25, 0, 0.08), (-0.55, 0, 0.15)], "knots": [0.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]},
    'arrowCurved': {"degree": 3, "points": [(-1.8, 0, 0.55), (-1.82, -0.25, 0.55), (-1.8, -0.6, 0.78), (-1.8, -0.6, 0.78), (-1.9, -0.68, 0.78), (-0.8, -0.4, -0.5), (0.6, -0.3, -0.3), (0.6, -0.29, -0.29), (0.6, -0.7, -0.2), (0.6, -0.7, -0.2), (1.4, -0.2, -0.05), (1.9, -0.00756066863, 0.6665802091), (1.888125814, -0.008535184692, 0.6665802091), (1.36196789, 0.192693039, -0.04707059674), (0.5611501067, 0.694931056, -0.216914913), (0.5632199962, 0.6943419668, -0.216914913), (0.5929464067, 0.2700576317, -0.2940162844), (0.6129258772, 0.2766395784, -0.2940162844), (-0.7830075821, 0.3823329508, -0.430739676), (-1.901274383, 0.6686455001, 0.7769122778), (-1.832530896, 0.6538833949, 0.7769122778), (-1.861508397, 0.5801364923, 0.7769122778), (-1.820970263, 0.2289086576, 0.551749315), (-1.80466262, -0.005513276723, 0.551749315)], "knots": [0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 9.996748889, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 20.0, 20.0]},
    'arrowDouble': {"degree": 1, "points": [(-0.25, 0, 0.08), (-0.25, 0, 0.25), (-.5, 0, 0), (-0.25, 0, -0.25), (-0.25, 0, -0.08), (0.25, 0, -0.08), (0.25, 0, -0.25), (.5, 0, 0), (0.25, 0, 0.25), (0.25, 0, .08), (-0.25, 0, .08)], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'arrowDoubleCurved': {"degree": 1, "points": [(0, 0, -.1), (0.14, .01, -.1), (.28, .02, -.1), (.42, .05, -.1), (.56, .08, -.1), (.56, .08, -.2), (.56, .08, -.3), (.7, .13, -.2), (.83, .19, -.1), (.95, .26, .0), (.83, .19, .1), (.7, .13, .2), (.56, .08, .3), (.56, .08, .2), (.56, .08, .1), (.42, .05, .1), (.28, .02, .1), (.14, .01, .1), (.0, .0, .1), (-.14, .01, .1), (-.28, .02, .1), (-.42, .05, .1), (-.56, .08, .1), (-.56, .08, .2), (-.56, .08, .3), (-.7, .13, .2), (-.83, .19, .1), (-.95, .26, .0), (-.83, .19, -.1), (-.7, .13, -.2), (-.56, .08, -.3), (-.56, .08, -.2), (-.56, .08, -.1), (-.42, .05, -.1), (-.28, .02, -.1), (-.14, .01, -.1), (.0, .0, -.1)], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]},
    'arrowFour': {"degree": 1, "points": [(0, 0, 1), (.3, 0, .7), (.12, 0, .7), (.12, 0, .35), (.12, 0, .12), (.35, 0, .12), (.7, 0, .12), (.7, 0, .3), (1, 0, 0), (.7, 0, -.3), (.7, 0, -.12), (.35, 0, -.12), (.12, 0, -.12), (.12, 0, -.35), (.12, 0, -.7), (.3, 0, -.7), (0, 0, -1), (-.3, 0, -.7), (-.12, 0, -.7), (-.12, 0, -.35), (-.12, 0, -.12), (-.35, 0, -.12), (-.7, 0, -.12), (-.7, 0, -.3), (-1, 0, 0), (-.7, 0, .3), (-.7, 0, .12), (-.35, 0, .12), (-.12, 0, .12), (-.12, 0, .35), (-.12, 0, .7), (-.3, 0, .7), (0, 0, 1)], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]},
    'arrowFourCurved':{"knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ], "degree": 1, "points": [[0.0, 0.32768142756461927, -0.928571302397316 ], [-0.336638, 0.677886, -0.751175 ], [-0.0959835, 0.677886, -0.751175 ], [-0.0959835, 0.850458, -0.500783 ], [-0.0959835, 0.954001, -0.0987656 ], [-0.500783, 0.850458, -0.0987656 ], [-0.751175, 0.677886, -0.0987656 ], [-0.751175, 0.677886, -0.336638 ], [-0.928571302397316, 0.32768142756461927, 0.0 ], [-0.751175, 0.677886, 0.336638 ], [-0.751175, 0.677886, 0.0987656 ], [-0.500783, 0.850458, 0.0987656 ], [-0.0959835, 0.954001, 0.0987656 ], [-0.0959835, 0.850458, 0.500783 ], [-0.0959835, 0.677886, 0.751175 ], [-0.336638, 0.677886, 0.751175 ], [0.0, 0.32768142756461927, 0.928571302397316 ], [0.336638, 0.677886, 0.751175 ], [0.0959835, 0.677886, 0.751175 ], [0.0959835, 0.850458, 0.500783 ], [0.0959835, 0.954001, 0.0987656 ], [0.500783, 0.850458, 0.0987656 ], [0.751175, 0.677886, 0.0987656 ], [0.751175, 0.677886, 0.336638 ], [0.928571302397316, 0.32768142756461927, 0.0 ], [0.751175, 0.677886, -0.336638 ], [0.751175, 0.677886, -0.0987656 ], [0.500783, 0.850458, -0.0987656 ], [0.0959835, 0.954001, -0.0987656 ], [0.0959835, 0.850458, -0.500783 ], [0.0959835, 0.677886, -0.751175 ], [0.336638, 0.677886, -0.751175 ], [0.0, 0.32768142756461927, -0.928571302397316 ] ]},
    'arrowStrike': {"degree": 1, "points": [(0, .70, 0), (-.15, .70, 0), (0, 1, 0), (.15, .70, 0), (0, .70, 0), (0, 0, 0)], "knots": [0, 1, 2, 3, 4, 5]},
    'circleH': {"degree": 1, "points": [(-1.0, 0.0, 0.0), (-.97, 0.0, -0.26), (-0.87, 0.0, -0.5), (-0.71, 0.0, -0.71), (-0.5, 0.0, -0.87), (-0.26, 0.0, -0.97), (-0.0, 0.0, -1.0), (0.26, 0.0, -0.97), (0.5, 0.0, -0.87), (0.71, 0.0, -0.71), (0.87, 0.0, -0.5), (0.97, 0.0, -0.26), (1.0, 0.0, -0.0), (0.97, 0.0, 0.26), (0.87, 0.0, 0.5), (0.71, 0.0, 0.71), (0.5, 0.0, 0.87), (0.26, 0.0, 0.97), (0.0, 0.0, 1.0), (-0.26, 0.0, 0.97), (-0.5, 0.0, 0.87), (-0.71, 0.0, 0.71), (-0.87, 0.0, 0.5), (-0.97, 0.0, 0.26), (-1.0, 0.0, -0.0)], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]},
    'circleV': {"degree": 3, "points": [(-0.78, -0.78, 0), (-1.11, 0, 0), (-0.78, 0.78, 0), (0, 1.11, 0), (0.78, 0.78, 0), (1.11, 0, 0), (0.78, -0.78, 0), (0, -1.11, 0), (-0.78, -0.78, 0), (-1.11, 0, 0), (-0.78, 0.78, 0)], "knots": [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]},
    'circle': {"degree": 3, "points": [(0.0, -0.78, -0.78), (0.0, 0.0, -1.11), (-0.0, 0.78, -0.78), (-0.0, 1.11, -0.0), (-0.0, 0.78, 0.78), (-0.0, 0.0, 1.11), (0.0, -0.78, 0.78), (0.0, -1.11, 0.0), (0.0, -0.78, -0.78), (0.0, 0.0, -1.11), (-0.0, 0.78, -0.78)], "knots": [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]},
    'circularArrow': {"degree": 3, "points": [[0.0, -0.3, 0.41], [0.0, -0.3, 0.41], [0.0, -0.3, 0.41], [0.0, -0.3, 0.41], [0.0, -0.28, 0.39], [0.0, -0.27, 0.36], [0.0, -0.26, 0.34], [0.0, -0.34, 0.28], [0.0, -0.46, 0.1], [0.0, -0.41, -0.21], [0.0, -0.18, -0.43], [0.0, 0.14, -0.44], [0.0, 0.4, -0.24], [0.0, 0.46, 0.07], [0.0, 0.3, 0.35], [0.0, 0.1, 0.42], [0.0, 0.0, 0.42], [0.0, 0.0, 0.4], [0.0, 0.0, 0.38], [0.0, 0.0, 0.35], [0.0, -0.03, 0.38], [0.0, -0.07, 0.42], [0.0, -0.11, 0.46], [0.0, -0.07, 0.5], [0.0, -0.03, 0.54], [0.0, 0.0, 0.57], [0.0, 0.0, 0.55], [0.0, 0.0, 0.53], [0.0, 0.0, 0.5], [0.0, 0.11, 0.5], [0.0, 0.35, 0.41], [0.0, 0.54, 0.09], [0.0, 0.46, -0.28], [0.0, 0.17, -0.52], [0.0, -0.21, -0.51], [0.0, -0.48, -0.25], [0.0, -0.54, 0.13], [0.0, -0.4, 0.34], [0.0, -0.3, 0.41]], "knots": [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 22.0, 22.0]},
    'chevron': {"degree": 1, "points": [(1.0, 0.0, 0.0), (0.0, 0.0, 1.0), (-1.0, 0.0, 0.0), (-0.5, 0.0, 0.0), (0.0, 0.0, 0.5), (0.5, 0.0, 0.0), (1.0, 0.0, 0.0)], "knots": [0, 1, 2, 3, 4, 5, 6]},
    'cross': {"degree": 1, "points": [[-0.15, 0.0, -0.5], [0.15, 0.0, -0.5], [0.15, 0.0, -0.15], [0.5, 0.0, -0.15], [0.5, 0.0, 0.15], [0.15, 0.0, 0.15], [0.15, 0.0, 0.5], [-0.15, 0.0, 0.5], [-0.15, 0.0, 0.15], [-0.5, 0.0, 0.15], [-0.5, 0.0, -0.15], [-0.15, 0.0, -0.15], [-0.15, 0.0, -0.5]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]},
    'crossX': {"degree": 1, "points": [[-0.35, 0, 0.5], [0, 0, 0.13], [0.35, 0, 0.5], [0.5, 0, 0.5], [0.5, 0, 0.35], [0.13, 0, 0], [0.5, -0, -0.35], [0.5, -0, -0.5], [0.35, -0, -0.5], [0, -0, -0.13], [-0.35, -0, -0.5], [-0.5, -0, -0.5], [-0.5, -0, -0.35], [-0.13, 0, 0], [-0.5, 0, 0.35], [-0.5, 0, 0.5], [-0.35, 0, 0.5]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]},
    'cube': {"degree": 1, "points": [[0.5, 0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, 0.5, -0.5], [0.5, 0.5, -0.5], [0.5, -0.5, -0.5], [-0.5, -0.5, -0.5], [-0.5, -0.5, 0.5], [0.5, -0.5, 0.5], [0.5, -0.5, -0.5], [0.5, 0.5, -0.5], [0.5, 0.5, 0.5], [0.5, -0.5, 0.5], [-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, 0.5, -0.5], [-0.5, -0.5, -0.5]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]},
    'diamond': {"degree": 1, "points": [[0.0, 0.5, 0.0], [0.0, 0.0, -0.5], [-0.5, 0.0, 0.0], [0.0, 0.5, 0.0], [0.0, 0.0, 0.5], [-0.5, 0.0, 0.0], [0.0, -0.5, 0.0], [0.0, 0.0, 0.5], [0.5, 0.0, 0.0], [0.0, 0.5, 0.0], [0.0, 0.0, -0.5], [0.5, 0.0, 0.0], [0.0, -0.5, 0.0], [0.0, 0.0, -0.5]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]},
    # 'fourArrowCircle': {"degree": 3, "knots": [15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38 ], "points": [[0.5310665568636426, 0.0, -0.16319211515181062 ], [0.5716338581115087, 0.0, -0.16319211515181062 ], [0.6122011593593754, -2.6297567603490507e-16, -0.16319211515181062 ], [0.6527684606072418, -2.6297567603490507e-16, -0.16319211515181062 ], [0.652768460607242, -3.287195950436315e-16, -0.21758948686908053 ], [0.6527684606072418, -2.6297567603490507e-16, -0.2719868585863511 ], [0.6527684606072403, -2.6297567603490507e-16, -0.32638423030362124 ], [0.761563204041782, -3.9446351405235827e-16, -0.21758948686908047 ], [0.8703579474763219, -3.287195950436315e-16, -0.10879474343454044 ], [0.9791526909108612, -3.287195950436315e-16, -1.9723175702617913e-16 ], [0.8703579474763219, -2.6297567603490507e-16, 0.10879474343454008 ], [0.7615632040417825, -2.6297567603490507e-16, 0.21758948686908 ], [0.6527684606072418, -2.6297567603490507e-16, 0.3263842303036201 ], [0.652768460607242, -3.287195950436315e-16, 0.27198685858635074 ], [0.6527684606072403, -2.6297567603490507e-16, 0.21758948686908 ], [0.652768460607242, -3.287195950436315e-16, 0.16319211515180995 ], [0.6105543689582854, -2.6297567603490507e-16, 0.16319211515181006 ], [0.5683402773093277, 0.0, 0.16319211515181006 ], [0.5306821744849097, 0.0, 0.1576061349063466 ], [0.504301859967615, -6.574391900872627e-17, 0.24548565043211668 ], [0.40992712073003684, 0.0, 0.4068207835509167 ], [0.24939565273489886, -4.9307939256544784e-17, 0.501999187912154 ], [0.16319211515181062, 3.2871959504363134e-17, 0.5274019383886498 ], [0.16319211515181062, 3.2871959504363134e-17, 0.5691907791281806 ], [0.16319211515181062, 3.2871959504363134e-17, 0.6109796198677113 ], [0.16319211515181062, 3.2871959504363134e-17, 0.652768460607242 ], [0.21758948686908053, 4.9307939256544784e-17, 0.652768460607242 ], [0.2719868585863512, 3.2871959504363134e-17, 0.652768460607242 ], [0.32638423030362124, -6.574391900872627e-17, 0.6527684606072418 ], [0.21758948686908047, -1.3148783801745253e-16, 0.7615632040417825 ], [0.10879474343454044, -6.574391900872627e-17, 0.8703579474763219 ], [1.9723175702617913e-16, 6.574391900872648e-17, 0.9791526909108612 ], [-0.10879474343453992, -1.6435979752181567e-17, 0.8703579474763219 ], [-0.2175894868690799, 9.861587851308957e-17, 0.7615632040417833 ], [-0.3263842303036201, 6.574391900872627e-17, 0.652768460607242 ], [-0.27198685858635063, 8.217989876090788e-17, 0.652768460607242 ], [-0.21758948686908017, 9.861587851308957e-17, 0.652768460607242 ], [-0.16319211515180995, -3.2871959504363134e-17, 0.652768460607242 ], [-0.16319211515181006, -1.6435979752181567e-17, 0.6108990109592392 ], [-0.16319211515181006, -1.6435979752181567e-17, 0.5690295613112373 ], [-0.16325022407170847, -3.2871959504363134e-17, 0.5289558346450746 ], [-0.24897914114410974, 4.9307939256544784e-17, 0.5022459585534358 ], [-0.40701894779174136, -3.2871959504363134e-17, 0.4086793289107159 ], [-0.5010082543839088, 0.0, 0.2510621992125347 ], [-0.5294499933956981, 0.0, 0.16319211515181006 ], [-0.5705561491328784, 0.0, 0.16319211515181006 ], [-0.6116623048700602, 2.6297567603490507e-16, 0.16319211515181006 ], [-0.652768460607242, 3.287195950436315e-16, 0.16319211515181006 ], [-0.6527684606072418, 3.9446351405235827e-16, 0.21758948686908 ], [-0.6527684606072418, 2.6297567603490507e-16, 0.27198685858635074 ], [-0.652768460607242, 3.287195950436315e-16, 0.3263842303036201 ], [-0.7615632040417825, 3.9446351405235827e-16, 0.21758948686908 ], [-0.8703579474763219, 2.6297567603490507e-16, 0.10879474343453992 ], [-0.9791526909108612, 3.287195950436315e-16, 1.9723175702617913e-16 ], [-0.8703579474763219, 4.602074330610828e-16, -0.10879474343453995 ], [-0.7615632040417825, 2.6297567603490507e-16, -0.21758948686908 ], [-0.6527684606072418, 2.6297567603490507e-16, -0.3263842303036201 ], [-0.6527684606072418, 2.6297567603490507e-16, -0.27198685858635063 ], [-0.6527684606072398, 2.6297567603490507e-16, -0.21758948686908 ], [-0.652768460607242, 3.287195950436315e-16, -0.16319211515180995 ], [-0.6099905377525536, 2.6297567603490507e-16, -0.16319211515181006 ], [-0.5672126148978659, 3.2871959504363134e-17, -0.16319211515181006 ], [-0.5282677129750167, 6.574391900872627e-17, -0.16544320640653276 ], [-0.5014411905824229, 0.0, -0.2503352678204684 ], [-0.4072918675149431, 6.574391900872627e-17, -0.40861724083679274 ], [-0.24867139311096967, 6.574391900872627e-17, -0.5024280625166248 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.5270809892717423 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.5689768130502424 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.6108726368287416 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.652768460607242 ], [-0.21758948686908053, -4.9307939256544784e-17, -0.652768460607242 ], [-0.2719868585863512, -3.2871959504363134e-17, -0.652768460607242 ], [-0.32638423030362124, 6.574391900872627e-17, -0.6527684606072418 ], [-0.21758948686908047, 1.3148783801745253e-16, -0.7615632040417825 ], [-0.10879474343454044, 6.574391900872627e-17, -0.8703579474763219 ], [-1.9723175702617913e-16, -6.574391900872648e-17, -0.9791526909108612 ], [0.10879474343453989, 8.217989876090788e-17, -0.8703579474763219 ], [0.2175894868690799, -9.861587851308957e-17, -0.7615632040417833 ], [0.3263842303036201, -6.574391900872627e-17, -0.652768460607242 ], [0.27198685858635063, -8.217989876090788e-17, -0.652768460607242 ], [0.21758948686908017, -9.861587851308957e-17, -0.652768460607242 ], [0.16319211515180995, 3.2871959504363134e-17, -0.652768460607242 ], [0.16319211515181006, 1.6435979752181567e-17, -0.6112769909878214 ], [0.16319211515181006, 1.6435979752181567e-17, -0.5697855213684031 ], [0.16319211515181006, 3.2871959504363134e-17, -0.5282940517489838 ], [0.24890951321304944, -6.574391900872627e-17, -0.502287176453063 ], [0.4083390094734796, 0.0, -0.40792044577734404 ], [0.5025982606212238, 0.0, -0.2483834699889401 ], [0.5292549015525906, 0.0, -0.16228731907083568 ]]},
    'star': {"knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], "degree": 1, "points": [[0.0, -0.808685, 0.587544 ], [0.0, -0.117124, 0.362759 ], [0.0, 0.308727, 0.950163 ], [0.0, 0.308789, 0.224351 ], [0.0, 1.0, 0.0 ], [0.0, 0.308789, -0.2259 ], [0.0, 0.308789, -0.950355 ], [0.0, -0.117124, -0.366219 ], [0.0, -0.808685, -0.591155 ], [0.0, -0.381065, 0.0 ], [0.0, -0.808685, 0.587544 ] ]},
    'star_8': {"knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ], "degree": 1, "points": [[0.0, 0.0, 0.99792 ], [0.0, 0.291405, 0.706516 ], [0.0, 0.706233, 0.706233 ], [0.0, 0.706233, 0.292213 ], [0.0, 0.99792, 0.0 ], [0.0, 0.706233, -0.291622 ], [0.0, 0.706233, -0.706233 ], [0.0, 0.291558, -0.706362 ], [0.0, 0.0, -0.99792 ], [0.0, -0.291292, -0.706362 ], [0.0, -0.706233, -0.706233 ], [0.0, -0.706233, -0.292591 ], [0.0, -0.99792, 0.0 ], [0.0, -0.706233, 0.291574 ], [0.0, -0.706233, 0.706233 ], [0.0, -0.291292, 0.706335 ], [0.0, 0.0, 0.99792 ] ]},
    'fourArrowCircle':{"knots": [15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38 ], "degree": 3, "form": 3, "points": [[0.5310665568636426, 0.0, -0.16319211515181062 ], [0.5716338581115087, 0.0, -0.16319211515181062 ], [0.6122011593593754, -2.6297567603490507e-16, -0.16319211515181062 ], [0.6527684606072418, -2.6297567603490507e-16, -0.16319211515181062 ], [0.652768460607242, -3.287195950436315e-16, -0.21758948686908053 ], [0.6527684606072418, -2.6297567603490507e-16, -0.2719868585863511 ], [0.6527684606072403, -2.6297567603490507e-16, -0.32638423030362124 ], [0.761563204041782, -3.9446351405235827e-16, -0.21758948686908047 ], [0.8703579474763219, -3.287195950436315e-16, -0.10879474343454044 ], [0.9791526909108612, -3.287195950436315e-16, -1.9723175702617913e-16 ], [0.8703579474763219, -2.6297567603490507e-16, 0.10879474343454008 ], [0.7615632040417825, -2.6297567603490507e-16, 0.21758948686908 ], [0.6527684606072418, -2.6297567603490507e-16, 0.3263842303036201 ], [0.652768460607242, -3.287195950436315e-16, 0.27198685858635074 ], [0.6527684606072403, -2.6297567603490507e-16, 0.21758948686908 ], [0.652768460607242, -3.287195950436315e-16, 0.16319211515180995 ], [0.6105543689582854, -2.6297567603490507e-16, 0.16319211515181006 ], [0.5683402773093277, 0.0, 0.16319211515181006 ], [0.5306821744849097, 0.0, 0.1576061349063466 ], [0.504301859967615, -6.574391900872627e-17, 0.24548565043211668 ], [0.40992712073003684, 0.0, 0.4068207835509167 ], [0.24939565273489886, -4.9307939256544784e-17, 0.501999187912154 ], [0.16319211515181062, 3.2871959504363134e-17, 0.5274019383886498 ], [0.16319211515181062, 3.2871959504363134e-17, 0.5691907791281806 ], [0.16319211515181062, 3.2871959504363134e-17, 0.6109796198677113 ], [0.16319211515181062, 3.2871959504363134e-17, 0.652768460607242 ], [0.21758948686908053, 4.9307939256544784e-17, 0.652768460607242 ], [0.2719868585863512, 3.2871959504363134e-17, 0.652768460607242 ], [0.32638423030362124, -6.574391900872627e-17, 0.6527684606072418 ], [0.21758948686908047, -1.3148783801745253e-16, 0.7615632040417825 ], [0.10879474343454044, -6.574391900872627e-17, 0.8703579474763219 ], [1.9723175702617913e-16, 6.574391900872648e-17, 0.9791526909108612 ], [-0.10879474343453992, -1.6435979752181567e-17, 0.8703579474763219 ], [-0.2175894868690799, 9.861587851308957e-17, 0.7615632040417833 ], [-0.3263842303036201, 6.574391900872627e-17, 0.652768460607242 ], [-0.27198685858635063, 8.217989876090788e-17, 0.652768460607242 ], [-0.21758948686908017, 9.861587851308957e-17, 0.652768460607242 ], [-0.16319211515180995, -3.2871959504363134e-17, 0.652768460607242 ], [-0.16319211515181006, -1.6435979752181567e-17, 0.6108990109592392 ], [-0.16319211515181006, -1.6435979752181567e-17, 0.5690295613112373 ], [-0.16325022407170847, -3.2871959504363134e-17, 0.5289558346450746 ], [-0.24897914114410974, 4.9307939256544784e-17, 0.5022459585534358 ], [-0.40701894779174136, -3.2871959504363134e-17, 0.4086793289107159 ], [-0.5010082543839088, 0.0, 0.2510621992125347 ], [-0.5294499933956981, 0.0, 0.16319211515181006 ], [-0.5705561491328784, 0.0, 0.16319211515181006 ], [-0.6116623048700602, 2.6297567603490507e-16, 0.16319211515181006 ], [-0.652768460607242, 3.287195950436315e-16, 0.16319211515181006 ], [-0.6527684606072418, 3.9446351405235827e-16, 0.21758948686908 ], [-0.6527684606072418, 2.6297567603490507e-16, 0.27198685858635074 ], [-0.652768460607242, 3.287195950436315e-16, 0.3263842303036201 ], [-0.7615632040417825, 3.9446351405235827e-16, 0.21758948686908 ], [-0.8703579474763219, 2.6297567603490507e-16, 0.10879474343453992 ], [-0.9791526909108612, 3.287195950436315e-16, 1.9723175702617913e-16 ], [-0.8703579474763219, 4.602074330610828e-16, -0.10879474343453995 ], [-0.7615632040417825, 2.6297567603490507e-16, -0.21758948686908 ], [-0.6527684606072418, 2.6297567603490507e-16, -0.3263842303036201 ], [-0.6527684606072418, 2.6297567603490507e-16, -0.27198685858635063 ], [-0.6527684606072398, 2.6297567603490507e-16, -0.21758948686908 ], [-0.652768460607242, 3.287195950436315e-16, -0.16319211515180995 ], [-0.6099905377525536, 2.6297567603490507e-16, -0.16319211515181006 ], [-0.5672126148978659, 3.2871959504363134e-17, -0.16319211515181006 ], [-0.5282677129750167, 6.574391900872627e-17, -0.16544320640653276 ], [-0.5014411905824229, 0.0, -0.2503352678204684 ], [-0.4072918675149431, 6.574391900872627e-17, -0.40861724083679274 ], [-0.24867139311096967, 6.574391900872627e-17, -0.5024280625166248 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.5270809892717423 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.5689768130502424 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.6108726368287416 ], [-0.16319211515181062, -3.2871959504363134e-17, -0.652768460607242 ], [-0.21758948686908053, -4.9307939256544784e-17, -0.652768460607242 ], [-0.2719868585863512, -3.2871959504363134e-17, -0.652768460607242 ], [-0.32638423030362124, 6.574391900872627e-17, -0.6527684606072418 ], [-0.21758948686908047, 1.3148783801745253e-16, -0.7615632040417825 ], [-0.10879474343454044, 6.574391900872627e-17, -0.8703579474763219 ], [-1.9723175702617913e-16, -6.574391900872648e-17, -0.9791526909108612 ], [0.10879474343453989, 8.217989876090788e-17, -0.8703579474763219 ], [0.2175894868690799, -9.861587851308957e-17, -0.7615632040417833 ], [0.3263842303036201, -6.574391900872627e-17, -0.652768460607242 ], [0.27198685858635063, -8.217989876090788e-17, -0.652768460607242 ], [0.21758948686908017, -9.861587851308957e-17, -0.652768460607242 ], [0.16319211515180995, 3.2871959504363134e-17, -0.652768460607242 ], [0.16319211515181006, 1.6435979752181567e-17, -0.6112769909878214 ], [0.16319211515181006, 1.6435979752181567e-17, -0.5697855213684031 ], [0.16319211515181006, 3.2871959504363134e-17, -0.5282940517489838 ], [0.24890951321304944, -6.574391900872627e-17, -0.502287176453063 ], [0.4083390094734796, 0.0, -0.40792044577734404 ], [0.5025982606212238, 0.0, -0.2483834699889401 ], [0.5292549015525906, 0.0, -0.16228731907083568 ] ]},
    'googleSign': {"degree": 1, "points": [[.75, 0, 0], [.71, 0, -.08], [.56, 0, -.32], [.45, 0, -.45], [.32, 0, -.56], [.17, 0, -.62], [0, 0, -.64], [-.17, 0, -.62], [-.32, 0, -.56], [-.45, 0, -.45], [-.56, 0, -.32], [-.62, .0, -.17], [-.64, 0, 0], [-.62, 0, .17], [-.56, 0, .32], [-.45, 0, .45], [-.32, 0, .56], [-.17, 0, .62], [0, 0, .64], [.17, 0, .62], [.32, 0, .56], [.45, 0, .45], [.56, 0, .32], [.71, 0, .08], [.75, 0, 0]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]},
    'googleSignSharp': {"knots": [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13 ], "degree": 3, "points": [[0.0, 0.0, 1.4458237945008834 ], [0.3390851803340782, 0.0, 0.9577110694510105 ], [0.3390851803340782, 0.0, 0.9577110694510105 ], [0.3390851803340782, 0.0, 0.9577110694510105 ], [0.8764628251341291, 0.0, 0.6064978822415238 ], [1.0070584462523031, 0.0, 0.01580116213963464 ], [0.8866375910572012, 0.0, -0.5159192834604646 ], [0.3592715607483328, 0.0, -0.9858403104926516 ], [-0.3592715607483328, 0.0, -0.9858403104926516 ], [-0.8866375910572012, 0.0, -0.5159192834604646 ], [-1.0070584462523031, 0.0, 0.01580116213963464 ], [-0.8764628251341291, 0.0, 0.6064978822415238 ], [-0.3390851803340782, 0.0, 0.9577110694510105 ], [-0.3390851803340782, 0.0, 0.9577110694510105 ], [-0.3390851803340782, 0.0, 0.9577110694510105 ], [0.0, 0.0, 1.4458237945008834 ] ]},
    'joint': {"degree": 1, "points": [[0.5, 0.0, 0.01], [0.49, 0.09, 0.0], [0.47, 0.17, 0.0], [0.43, 0.25, 0.0], [0.38, 0.32, 0.0], [0.32, 0.38, 0.0], [0.25, 0.43, 0.0], [0.17, 0.47, 0.0], [0.09, 0.49, 0.0], [-0.0, 0.5, 0.0], [-0.09, 0.49, 0.0], [-0.17, 0.47, 0.0], [-0.25, 0.43, 0.0], [-0.32, 0.38, 0.0], [-0.38, 0.32, 0.0], [-0.43, 0.25, 0.0], [-0.47, 0.17, 0.0], [-0.49, 0.09, 0.0], [-0.5, 0.0, 0.0], [0.5, 0.0, 0.0], [0.49, -0.09, 0.0], [0.47, -0.17, 0.0], [0.43, -0.25, 0.0], [0.38, -0.32, 0.0], [0.32, -0.38, 0.0], [0.25, -0.43, 0.0], [0.17, -0.47, 0.0], [0.09, -0.49, 0.0], [-0.0, -0.5, 0.0], [-0.09, -0.49, 0.0], [-0.17, -0.47, 0.0], [-0.25, -0.43, 0.0], [-0.32, -0.38, 0.0], [-0.38, -0.32, 0.0], [-0.43, -0.25, 0.0], [-0.47, -0.17, 0.0], [-0.49, -0.09, 0.0], [-0.5, 0.0, 0.0], [-0.49, 0.0, 0.09], [-0.47, 0.0, 0.17], [-0.43, 0.0, 0.25], [-0.38, 0.0, 0.32], [-0.32, 0.0, 0.38], [-0.25, 0.0, 0.43], [-0.17, 0.0, 0.47], [-0.09, 0.0, 0.49], [-0.0, 0.0, 0.5], [-0.0, 0.0, -0.5], [0.09, 0.0, -0.49], [0.17, 0.0, -0.47], [0.25, 0.0, -0.43], [0.32, 0.0, -0.38], [0.38, 0.0, -0.32], [0.43, 0.0, -0.25], [0.47, 0.0, -0.17], [0.49, 0.0, -0.09], [0.5, 0.0, 0.0], [0.49, 0.0, 0.09], [0.47, 0.0, 0.17], [0.43, 0.0, 0.25], [0.38, 0.0, 0.32], [0.32, 0.0, 0.38], [0.25, 0.0, 0.43], [0.17, 0.0, 0.47], [0.09, 0.0, 0.49], [-0.0, 0.0, 0.5], [-0.0, 0.09, 0.49], [-0.0, 0.17, 0.47], [-0.0, 0.25, 0.43], [-0.0, 0.32, 0.38], [-0.0, 0.38, 0.32], [-0.0, 0.43, 0.25], [-0.0, 0.47, 0.17], [-0.0, 0.49, 0.09], [-0.0, 0.5, 0.0], [-0.0, -0.5, 0.0], [-0.0, -0.49, -0.09], [-0.0, -0.47, -0.17], [-0.0, -0.43, -0.25], [-0.0, -0.38, -0.32], [-0.0, -0.32, -0.38], [-0.0, -0.25, -0.43], [-0.0, -0.17, -0.47], [-0.0, -0.09, -0.49], [-0.0, 0.0, -0.5], [-0.0, 0.09, -0.49], [-0.0, 0.17, -0.47], [-0.0, 0.25, -0.43], [-0.0, 0.32, -0.38], [-0.0, 0.38, -0.32], [-0.0, 0.43, -0.25], [-0.0, 0.47, -0.17], [-0.0, 0.49, -0.09], [-0.0, 0.5, 0.0], [-0.0, -0.5, 0.0], [-0.0, -0.49, 0.09], [-0.0, -0.47, 0.17], [-0.0, -0.43, 0.25], [-0.0, -0.38, 0.32], [-0.0, -0.32, 0.38], [-0.0, -0.25, 0.43], [-0.0, -0.17, 0.47], [-0.0, -0.09, 0.49], [-0.0, 0.0, 0.5], [-0.0, 0.0, -0.5], [-0.09, 0.0, -0.49], [-0.17, 0.0, -0.47], [-0.25, 0.0, -0.43], [-0.32, 0.0, -0.38], [-0.38, 0.0, -0.32], [-0.43, 0.0, -0.25], [-0.47, 0.0, -0.17], [-0.49, 0.0, -0.09], [-0.5, 0.0, 0.0]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]},
    'locator': {"degree": 1, "points": [[0.0, 0.5, 0.0], [0.0, -0.5, 0.0], [0.0, 0.0, 0.0], [-0.5, 0.0, 0.0], [0.5, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.5], [0.0, 0.0, -0.5]], "knots": [0, 1, 2, 3, 4, 5, 6, 7]},
    'locatorVolume': {"degree": 1, "points": [[-0.02, 0.02, 0.5], [0.02, 0.02, 0.5], [0.02, -0.02, 0.5], [-0.02, -0.02, 0.5], [-0.02, 0.02, 0.5], [-0.02, 0.02, -0.5], [0.02, 0.02, -0.5], [0.02, -0.02, -0.5], [-0.02, -0.02, -0.5], [-0.02, 0.02, -0.5], [0.02, 0.02, -0.5], [0.02, 0.02, 0.5], [0.02, -0.02, 0.5], [0.02, -0.02, -0.5], [-0.02, -0.02, -0.5], [-0.02, -0.02, 0.5], [0.02, -0.02, 0.5], [0.02, -0.02, 0.02], [0.5, -0.02, 0.02], [0.5, 0.02, 0.02], [0.5, 0.02, -0.02], [0.5, -0.02, -0.02], [0.5, -0.02, 0.02], [0.5, 0.02, 0.02], [-0.5, 0.02, 0.02], [-0.5, -0.02, 0.02], [-0.5, -0.02, -0.02], [-0.5, 0.02, -0.02], [-0.5, 0.02, 0.02], [-0.5, -0.02, 0.02], [0.5, -0.02, 0.02], [0.5, -0.02, -0.02], [-0.5, -0.02, -0.02], [-0.5, 0.02, -0.02], [0.5, 0.02, -0.02], [0.5, 0.02, 0.02], [0.02, 0.02, 0.02], [0.02, 0.5, 0.02], [-0.02, 0.5, 0.02], [-0.02, 0.5, -0.02], [0.02, 0.5, -0.02], [0.02, 0.5, 0.02], [-0.02, 0.5, 0.02], [-0.02, -0.5, 0.02], [0.02, -0.5, 0.02], [0.02, -0.5, -0.02], [-0.02, -0.5, -0.02], [-0.02, -0.5, 0.02], [0.02, -0.5, 0.02], [0.02, 0.5, 0.02], [0.02, 0.5, -0.02], [0.02, -0.5, -0.02], [-0.02, -0.5, -0.02], [-0.02, 0.5, -0.02]], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]},
    'lollipopCircle': {"degree": 1, "points": [[0, .5, 0], [.07, .51, 0], [.13, .53, 0], [.18, .57, 0], [.22, .62, 0], [.24, .68, 0], [.25, .75, 0], [.24, .81, 0], [.22, .87, 0], [.18, .93, 0], [.13, .97, 0], [.07, .99, 0], [0, 1, 0], [-.07, .99, 0], [-.13, .97, 0], [-.18, .93, 0], [-.22, .87, 0], [-.24, .81, 0], [-.25, .75, 0], [-.24, .68, 0], [-.22, .62, 0], [-.18, .57, 0], [-.13, .53, 0], [-.07, .51, 0], [.0, .5, 0], [0, 0, 0]], "knots": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]},
    'lollipopCircle180X': {"degree": 1, "points": [[0, -.5, 0], [-.07, -.51, 0], [-.13, -.53, 0], [-.18, -.57, 0], [-.22, -.62, 0], [-.24, -.68, 0], [-.25, -.75, 0], [-.24, -.81, 0], [-.22, -.87, 0], [-.18, -.93, 0], [-.13, -.97, 0], [-.07, -.99, 0], [0, -1, 0], [.07, -.99, 0], [.13, -.97, 0], [.18, -.93, 0], [.22, -.87, 0], [.24, -.81, 0], [.25, -.75, 0], [.24, -.68, 0], [.22, -.62, 0], [.18, -.57, 0], [.13, -.53, 0], [.07, -.51, 0], [.0, -.5, 0], [0, 0, 0]], "knots": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]},
    'lollipopCircleNeg90X': {"degree": 1, "points": [[0, 0, -.5], [.07, 0, -.51], [.13, 0, -.53], [.18, 0, -.57], [.22, 0, -.62], [.24, 0, -.68], [.25, 0, -.75], [.24, 0, -.81], [.22, 0, -.87], [.18, 0, -.93], [.13, 0, -.97], [.07, 0, -.99], [0, 0, -1], [-.07, 0, -.99], [-.13, 0, -.97], [-.18, 0, -.93], [-.22, 0, -.87], [-.24, 0, -.81], [-.25, 0, -.75], [-.24, 0, -.68], [-.22, 0, -.62], [-.18, 0, -.57], [-.13, 0, -.53], [-.07, 0, -.51], [0, 0, -.5], [0, 0, 0]], "knots": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]},
    'lollipopDouble': {"degree": 1, "points": [[-1.4695761589768238e-16, -1.2, 0.0 ], [-0.23511400000000016, -1.276393, 0.0 ], [-0.3804230000000002, -1.476393, 0.0 ], [-0.38042300000000023, -1.723607, 0.0 ], [-0.2351140000000002, -1.923607, 0.0 ], [-2.4492935982947064e-16, -2.0, 0.0 ], [0.23511399999999977, -1.923607, 0.0 ], [0.3804229999999998, -1.723607, 0.0 ], [0.38042299999999984, -1.476393, 0.0 ], [0.23511399999999982, -1.276393, 0.0 ], [-1.4695761589768238e-16, -1.2, 0.0 ], [0.0, 0.0, 0.0 ], [0.0, 1.2, 0.0 ], [-0.235114, 1.276393, 0.0 ], [-0.380423, 1.476393, 0.0 ], [-0.380423, 1.723607, 0.0 ], [-0.235114, 1.923607, 0.0 ], [0.0, 2.0, 0.0 ], [0.235114, 1.923607, 0.0 ], [0.380423, 1.723607, 0.0 ], [0.380423, 1.476393, 0.0 ], [0.235114, 1.276393, 0.0 ], [0.0, 1.2, 0.0 ] ], "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 ]},
    'lollipopFour': {"knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88 ], "degree": 1, "points": [[-5.329070518200751e-16, -1.2, 0.0 ], [-0.23511400000000054, -1.276393, 0.0 ], [-0.3804230000000007, -1.476393, 0.0 ], [-0.3804230000000008, -1.723607, 0.0 ], [-0.23511400000000082, -1.923607, 0.0 ], [-8.881784197001252e-16, -2.0, 0.0 ], [0.23511399999999916, -1.923607, 0.0 ], [0.38042299999999923, -1.723607, 0.0 ], [0.38042299999999935, -1.476393, 0.0 ], [0.23511399999999943, -1.276393, 0.0 ], [-5.329070518200751e-16, -1.2, 0.0 ], [0.0, 0.0, 0.0 ], [0.0, 1.2, 0.0 ], [-0.235114, 1.276393, 0.0 ], [-0.380423, 1.476393, 0.0 ], [-0.380423, 1.723607, 0.0 ], [-0.235114, 1.923607, 0.0 ], [0.0, 2.0, 0.0 ], [0.235114, 1.923607, 0.0 ], [0.380423, 1.723607, 0.0 ], [0.380423, 1.476393, 0.0 ], [0.235114, 1.276393, 0.0 ], [0.0, 1.2, 0.0 ], [0.235114, 1.276393, 0.0 ], [0.380423, 1.476393, 0.0 ], [0.380423, 1.723607, 0.0 ], [0.235114, 1.923607, 0.0 ], [0.0, 2.0, 0.0 ], [-0.235114, 1.923607, 0.0 ], [-0.380423, 1.723607, 0.0 ], [-0.380423, 1.476393, 0.0 ], [-0.235114, 1.276393, 0.0 ], [0.0, 1.2, 0.0 ], [0.0, 0.0, 0.0 ], [-1.2, 2.6645352591003756e-16, 0.0 ], [-1.276393, -0.2351139999999997, 0.0 ], [-1.476393, -0.3804229999999997, 0.0 ], [-1.723607, -0.3804229999999996, 0.0 ], [-1.923607, -0.23511399999999957, 0.0 ], [-2.0, 4.440892098500626e-16, 0.0 ], [-1.923607, 0.2351140000000004, 0.0 ], [-1.723607, 0.3804230000000004, 0.0 ], [-1.476393, 0.38042300000000034, 0.0 ], [-1.276393, 0.23511400000000027, 0.0 ], [-1.2000000000000002, 2.664535259100376e-16, 0.0 ], [-1.2763930000000003, 0.23511400000000032, 0.0 ], [-1.4763930000000003, 0.38042300000000046, 0.0 ], [-1.7236070000000003, 0.3804230000000005, 0.0 ], [-1.9236070000000005, 0.23511400000000046, 0.0 ], [-2.0000000000000004, 4.440892098500628e-16, 0.0 ], [-1.9236070000000005, -0.23511399999999963, 0.0 ], [-1.7236070000000003, -0.38042299999999973, 0.0 ], [-1.4763930000000003, -0.3804229999999998, 0.0 ], [-1.2763930000000003, -0.23511399999999977, 0.0 ], [-1.2000000000000002, 2.6645352591003766e-16, 0.0 ], [0.0, 0.0, 0.0 ], [4.930380657631324e-32, 1.2000000000000002, 0.0 ], [-0.23511400000000005, 1.2763930000000003, 0.0 ], [-0.3804230000000001, 1.4763930000000003, 0.0 ], [-0.3804230000000001, 1.7236070000000003, 0.0 ], [-0.23511400000000005, 1.9236070000000005, 0.0 ], [9.860761315262648e-32, 2.0000000000000004, 0.0 ], [0.23511400000000005, 1.9236070000000005, 0.0 ], [0.3804230000000001, 1.7236070000000003, 0.0 ], [0.3804230000000001, 1.4763930000000003, 0.0 ], [0.23511400000000005, 1.2763930000000003, 0.0 ], [4.930380657631324e-32, 1.2000000000000002, 0.0 ], [0.23511400000000005, 1.2763930000000003, 0.0 ], [0.3804230000000001, 1.4763930000000003, 0.0 ], [0.3804230000000001, 1.7236070000000003, 0.0 ], [0.23511400000000005, 1.9236070000000005, 0.0 ], [9.860761315262648e-32, 2.0000000000000004, 0.0 ], [-0.23511400000000005, 1.9236070000000005, 0.0 ], [-0.3804230000000001, 1.7236070000000003, 0.0 ], [-0.3804230000000001, 1.4763930000000003, 0.0 ], [-0.23511400000000005, 1.2763930000000003, 0.0 ], [4.930380657631324e-32, 1.2000000000000002, 0.0 ], [0.0, 0.0, 0.0 ], [1.2000000000000002, -4.134111418077201e-16, 0.0 ], [1.2763930000000003, 0.2351139999999996, 0.0 ], [1.4763930000000003, 0.3804229999999996, 0.0 ], [1.7236070000000003, 0.3804229999999995, 0.0 ], [1.9236070000000005, 0.2351139999999994, 0.0 ], [2.0000000000000004, -6.890185696795336e-16, 0.0 ], [1.9236070000000005, -0.23511400000000068, 0.0 ], [1.7236070000000003, -0.38042300000000073, 0.0 ], [1.4763930000000003, -0.3804230000000006, 0.0 ], [1.2763930000000003, -0.2351140000000005, 0.0 ], [1.2000000000000002, -4.134111418077201e-16, 0.0 ] ]},
    'lollipopSquare': {"degree": 1, "points": [[0, .63, 0], [.2, .63, 0], [.2, 1, 0], [-.2, 1, 0], [-.2, .63, 0], [0, .63, 0], [0, 0, 0]], "knots": [0, 1, 2, 3, 4, 5, 6]},
    'sphere': {"degree": 3, "points": [[-0.5, 0.0, 0.0], [-0.5, 0.0, -0.07], [-0.47, 0.0, -0.2], [-0.36, 0.0, -0.36], [-0.2, 0.0, -0.47], [-0.07, 0.0, -0.5], [0.0, -0.0, -0.5], [0.07, -0.0, -0.5], [0.2, -0.0, -0.47], [0.36, -0.0, -0.36], [0.47, -0.0, -0.2], [0.5, -0.0, -0.07], [0.5, -0.0, 0.0], [0.5, -0.0, 0.07], [0.47, -0.0, 0.2], [0.36, -0.0, 0.36], [0.2, -0.0, 0.47], [0.07, 0.0, 0.5], [0.0, 0.0, 0.5], [0.0, -0.07, 0.5], [-0.0, -0.2, 0.47], [-0.0, -0.36, 0.36], [-0.0, -0.47, 0.2], [-0.0, -0.5, 0.07], [0.0, -0.5, 0.0], [0.0, -0.5, -0.07], [0.0, -0.47, -0.2], [0.0, -0.36, -0.36], [-0.0, -0.2, -0.47], [-0.0, -0.07, -0.5], [-0.0, -0.0, -0.5], [0.0, 0.07, -0.5], [0.0, 0.2, -0.47], [0.0, 0.36, -0.36], [0.0, 0.47, -0.2], [0.0, 0.5, -0.07], [0.0, 0.5, 0.0], [-0.07, 0.5, 0.0], [-0.2, 0.47, 0.0], [-0.36, 0.36, 0.0], [-0.47, 0.2, 0.0], [-0.5, 0.07, 0.0], [-0.5, 0.0, 0.0], [-0.5, -0.07, -0.0], [-0.47, -0.2, -0.0], [-0.36, -0.36, -0.0], [-0.2, -0.47, -0.0], [-0.07, -0.5, -0.0], [0.0, -0.5, 0.0], [0.07, -0.5, 0.0], [0.2, -0.47, 0.0], [0.36, -0.36, 0.0], [0.47, -0.2, 0.0], [0.5, -0.07, 0.0], [0.5, -0.0, 0.0], [0.5, 0.07, 0.0], [0.47, 0.2, 0.0], [0.36, 0.36, 0.0], [0.2, 0.47, 0.0], [0.07, 0.5, 0.0], [0.0, 0.5, -0.0], [0.0, 0.5, 0.07], [0.0, 0.47, 0.2], [0.0, 0.36, 0.36], [-0.0, 0.2, 0.47], [-0.0, 0.07, 0.5], [-0.0, 0.0, 0.5], [-0.07, 0.0, 0.5], [-0.2, 0.0, 0.47], [-0.36, 0.0, 0.36], [-0.47, 0.0, 0.2], [-0.5, 0.0, 0.07], [-0.5, 0.0, -0.0]], "knots": [0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 16, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 24, 25, 26, 27, 28, 28, 28, 29, 30, 31, 32, 32, 32, 33, 34, 35, 36, 36, 36, 37, 38, 39, 40, 40, 40, 41, 42, 43, 44, 44, 44, 45, 46, 47, 48, 48, 48]},
    'square': {"degree": 1, "points": [[-0.0, 0.5, 0.5], [0.0, -0.5, 0.5], [0.0, -0.5, -0.5], [-0.0, 0.5, -0.5], [-0.0, 0.5, 0.5]], "knots": [0, 1, 2, 3, 4]},
    'triangle': {"degree": 1, "points": [[(0.0, 0.0, 1.0), (0.0, 1.0, -1.0), (0.0, 0.0, -1.0), (0.0, 0.0, 1.0)]], "knots": [0, 1, 2, 3]},
    
    'nose': {"degree": 3, "points": [[0.85, 3.08, -1.56], [0, 3.83, -0.96], [-0.85, 3.08, -1.56], [-1.49, 0.87, -1.76], [-2.89, -0.99, -1.18], [0.00, -2.0, -0.8], [2.89, -0.98, -1.18], [1.49, 0.87, -1.76], [0.85, 3.08, -1.56], [0, 3.83, -0.96], [-0.85, 3.08, -1.56]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'noseZNeg': {"degree": 3, "points": [[0.85, -1.56, -3.08], [0, -0.96, -3.83], [-0.85, -1.56, -3.08], [-1.49, -1.76, -0.87], [-2.89, -1.18, 0.99], [0, -0.8, 2.0], [2.89, -1.18, 0.98], [1.49, -1.76, -0.87], [0.85, -1.56, -3.08], [0, -0.96, -3.83], [-0.85, -1.56, -3.08]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'noseZ' : {"degree": 3, "points": [[0.85, 1.56, 3.08], [0, 0.96, 3.83], [-0.85, 1.56, 3.08], [-1.49, 1.76, 0.87], [-2.9, 1.18, -0.99], [0, 0.8, -2.0], [2.9, 1.18, -0.98], [1.49, 1.76, 0.87], [0.85, 1.56, 3.08], [0, 0.96, 3.83], [-0.85, 1.56, 3.08]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    
    'browLeft': {"degree":3, "points": [[2.10, 0.24, -0.96], [-0.287, 1.61, 1.13], [-3.13, 0.73, 1.79], [-3.36, -0.08, 1.78], [-2.94, -0.82, 1.79], [-0.28, -0.59, 1.13], [1.82, -1.29, -0.96], [2.12, -0.55, -1.24], [2.10, 0.248, -0.96], [-0.28, 1.61, 1.13], [-3.13, 0.73, 1.79]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'browLeftZNeg': {"degree":3, "points": [[2.1, -0.96, -0.24], [-0.287, 1.13, -1.61], [-3.13, 1.79, -0.73], [-3.36, 1.78, 0.08], [-2.94, 1.79, 0.82], [-0.28, 1.13, 0.59], [1.82, -0.96, 1.29], [2.12, -1.24, 0.55], [2.1, -0.96, -0.248], [-0.28, 1.13, -1.61], [-3.13, 1.79, -0.73]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'browLeftZ' : {"degree":3, "points": [[2.1, 0.96, 0.2], [-0.285, -1.13, 1.61], [-3.13, -1.79, 0.73], [-3.36, -1.78, -0.08], [-2.94, -1.8, -0.82], [-0.28, -1.13, -0.59], [1.82, 0.96, -1.29], [2.12, 1.24, -0.55], [2.1, 0.96, 0.248], [-0.28, -1.13, 1.61], [-3.13, -1.79, 0.73]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    
    'browRight': {"degree":3, "points": [[-2.10, 0.24, -0.96], [0.28, 1.61, 1.13], [3.13, 0.73, 1.79], [3.36, -0.08, 1.78], [2.94, -0.82, 1.79], [0.28, -0.59, 1.13], [-1.82, -1.29, -0.96], [-2.12, -0.55, -1.24], [-2.10, 0.24, -0.96], [0.28, 1.61, 1.13], [3.13, 0.73, 1.79]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'browRightZNeg': {"degree":3, "points": [[-2.1, -0.96, -0.24], [0.28, 1.13, -1.61], [3.13, 1.79, -0.73], [3.36, 1.78, 0.08], [2.94, 1.79, 0.82], [0.28, 1.13, 0.59], [-1.82, -0.96, 1.29], [-2.12, -1.24, 0.55], [-2.1, -0.96, -0.24], [0.28, 1.13, -1.61], [3.13, 1.79, -0.73]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'browRightZ': {"degree":3, "points": [[-2.1, 0.96, 0.24], [0.28, -1.13, 1.61], [3.13, -1.79, 0.73], [3.36, -1.78, -0.08], [2.94, -1.79, -0.82], [0.28, -1.13, -0.59], [-1.82, 0.96, -1.29], [-2.12, 1.24, -0.55], [-2.1, 0.96, 0.24], [0.28, -1.13, 1.61], [3.13, -1.79, 0.73]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    
    'lipTop': {"degree":3, "points": [[-2.22, -0.27, -0.35], [0.0, -0.51, 0.87], [2.22, -0.27, -0.35], [2.43, 0.14, -0.53], [2.22, 0.56, -0.20], [0.0, 0.95, 1.13], [-2.22, 0.56, -0.20], [-2.43, 0.14, -0.53], [-2.22, -0.27, -0.35], [0.0, -0.51, 0.87], [2.22, -0.27, -0.35]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'lipTopZNeg': {"degree":3, "points": [[-2.22, -0.35, 0.27], [0, 0.87, 0.51], [2.22, -0.35, 0.27], [2.43, -0.53, -0.14], [2.22, -0.2, -0.56], [0, 1.13, -0.95], [-2.22, -0.2, -0.56], [-2.43, -0.53, -0.14], [-2.22, -0.35, 0.27], [0, 0.87, 0.51], [2.22, -0.35, 0.27]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'lipTopZ' : {"degree":3, "points": [[-2.22, 0.35, -0.27], [0, -0.87, -0.51], [2.22, 0.35, -0.27], [2.43, 0.53, 0.14], [2.22, 0.2, 0.56], [0, -1.13, 0.95], [-2.22, 0.2, 0.56], [-2.43, 0.53, 0.14], [-2.22, 0.35, -0.27], [0, -0.87, -0.51], [2.22, 0.35 -0.27]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},

    'lipBot': {"degree":3, "points": [[2.42, 0.36, -0.22], [0.019, 0.39, 1.01], [-2.427, 0.38, -0.23], [-2.65, 0.0, -0.49], [-2.42, -0.47, -0.23], [0.0, -1.28, 0.79], [2.42, -0.47, -0.23], [2.65, 0.0, -0.49], [2.42, 0.37, -0.23], [0.02, 0.39, 1.01], [-2.42, 0.38, -0.23]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'lipBotZNeg': {"degree":3, "points": [[2.42, -0.22, -0.36], [0.019, 1.01, -0.39], [-2.427, -0.23, -0.38], [-2.65, -0.49, -2.77], [-2.42, -0.23, 0.47], [0, 0.79, 1.28], [2.42, -0.23, 0.47], [2.65, -0.49, -2.77], [2.42, -0.23, -0.37], [0.02, 1.01, -0.39], [-2.42, -0.23, -0.38]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'lipBotZ': {"degree":3, "points": [[2.42, 0.22, 0.36], [0.019, -1.01, 0.39], [-2.427, 0.23, 0.38], [-2.65, 0.49, 0], [-2.42, 0.23, -0.47], [0, -0.79, -1.28], [2.42, 0.23, -0.47], [2.65, 0.49, 0], [2.42, 0.23, 0.37], [0.02, -1.01, 0.39], [-2.42, 0.23, 0.38]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    
    'earLeft': {"degree":3, "points": [[1.027, -2.6, -1.56], [1.51, 0.28, -2.77], [1.9, 3.68, -2.25], [1.73, 4.47, 0.55], [1.36, 3.08, 2.56], [0.98, 0.15, 2.6], [0.56, -2.71, 3.1], [0.58, -3.9, 1.26], [1.02, -2.6, -1.56], [1.5, 0.28, -2.77], [1.9, 3.68, -2.248]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'earLeftZNeg': {"degree":3, "points": [[1.03, -1.46, 3.03], [1.52, -2.67, 0.15], [1.9, -2.15, -3.26], [1.74, 0.65, -4.04], [1.36, 2.66, -2.66], [0.98, 2.69, 0.27], [0.56, 3.2, 3.14], [0.58, 1.36, 4.37], [1.0, -1.46, 3.0], [1.52, -2.67, 0.15], [1.9, -2.14, -3.25]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'earLeftZ': {"degree":3, "points": [[1.027, 1.56, -2.6], [1.51, 2.77, 0.28], [1.9, 2.25, 3.68], [1.73, -0.55, 4.47], [1.36, -2.56, 3.08], [0.98, -2.6, 0.15], [0.56, -3.1, -2.71], [0.58, -1.26, -3.9], [1.02, 1.56, -2.6], [1.5, 2.77, 0.28], [1.9, 2.25, 3.68]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    
    'earRight': {"degree":3, "points": [[-1.03, -2.6, -1.56], [-1.51, 0.28, -2.77], [-1.9, 3.68, -2.25], [-1.73, 4.47, 0.55], [-1.36, 3.09, 2.56], [-0.98, 0.15, 2.6], [-0.56, -2.7, 3.1], [-0.58, -3.95, 1.26], [-1.03, -2.6, -1.56], [-1.51, 0.28, -2.77], [-1.9, 3.68, -2.24]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'earRightZNeg': {"degree":3, "points": [[-1.027, -1.46, 3.0], [-1.51, -2.67, 0.14], [-1.9, -2.14, -3.25], [-1.7, 0.65, -4.04], [-1.36, 2.66, -2.66], [-0.98, 2.69, 0.27], [-0.56, 3.2, 3.14], [-0.58, 1.36, 4.37], [-1.03, -1.46, 3.0], [-1.5, -2.67, 0.15], [-1.9, -2.15, -3.26]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
    'earRightZ': {"degree":3, "points": [[-1.03, 1.56, -2.6], [-1.51, 2.77, 0.28], [-1.9, 2.25, 3.68], [-1.73, -0.55, 4.47], [-1.36, -2.56, 3.09], [-0.98, -2.6, 0.15], [-0.56, -3.1, -2.7], [-0.58, -1.26, -3.95], [-1.03, 1.56, -2.6], [-1.51, 2.77, 0.28], [-1.9, 2.24, 3.68]], "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
    }

COLORS = OrderedDict([('default', 0), ('black', 1), ('darkGrey', 2),
            ('lightGrey', 3), ('darkRed', 4), ('darkBlue', 5), ('blue', 6),
            ('darkGreen', 7), ('darkPink', 8), ('pink', 9), ('brown', 10),
            ('darkBrown', 11), ('redBrown', 12), ('red', 13),
            ('lightgreen', 14), ('softBlue', 15), ('white', 16), ('yellow', 17),
            ('lightBlue', 18), ('lightGreen', 19), ('lightRed', 20),
            ('lightBrown', 21), ('lightYellow', 22), ('green', 23),
            ('pastelBrown', 24), ('pastelYellow', 25), ('yellowGreen', 26),
            ('blueGreen', 27), ('turquoise', 28), ('pastelBlue', 29),
            ('greyPink', 30), ('pastelRed', 31)])

class Control(object):
    '''
    Main control creation class.
    If a valid suffix is given (i.e. 'ctl'), the object will be named with it,
    otherwise it'll be added automatically (in other words, there is no difference)
    The colors can be given as index or as string, based on the _colorDict dictionnary
    '''
    def __init__(self, name, depth=1, shape='cube', color=None, size=1,  
                 jt=False, orient='+x', keyable='trs', rotateOrder='xyz',
                 parent=None, match=None, lineWidth=-1., loc=False,
                 tagAsController=True, tagParent=None, sets=None, instance=False, 
                 ctlSuffix='', jntSuffix='', bfrSuffix=''):
        '''
        :param instance: if we know we're instanciating a ctl that already
                         exists, we can pass True as the instance, to prevent
                         the logger to print a warning telling the ctl exists
        :type  instance: bool
        '''
        # DATAS
        self._rotateOrderStrToInt={'xyz':0,'yzx':1,'zxy':2,'xzy':3,'yxz':4,'zyx':5}
        self._rotateOrderIntToStr=['xyz','yzx','zxy','xzy','yxz','zyx']

        self._controls = []
        self._controlsShapes = []
        # self._controlsLocs = []


        # INPUTS
        self._depth       = depth
        self._shape       = shape
        self._color       = color or self._setColorFromName(name)
        self._size        = size
        self._joint       = jt
        self._parent      = parent
        self._rotateOrder = rotateOrder
        self._match       = match
        self._keyable     = keyable
        self._lineWidth   = lineWidth
        self._sets        = sets

        self._ctlSuffix   = ''
        self._jntSuffix   = ''
        self._bfrSuffix   = ''
        self._tagParent   = tagParent

        ############### Set naming convention here ###############
        if ctlSuffix  == '':
            self._ctlSuffix = 'anim' # Default
        else:
            self._ctlSuffix = ctlSuffix

        if jntSuffix  == '':
            self._jntSuffix = 'bind' # Default
        else:
            self._jntSuffix = jntSuffix

        if bfrSuffix     == '':
            self._bfrSuffix = 'bfr' # Default
        else:
            self._bfrSuffix = bfrSuffix
        ############### Set naming convention here ###############



        # if the object exists already, we just recreate an instance
        self._group = None
        if cmds.objExists(name):
            self._name = Control._extractNiceName(name)
            if not self._name:
                raise NameError('Unable to extract a nicename out of ' + name)
        else:
            self._name = name
        if self._instanciateExistingObject(self._name, suffix=self._ctlSuffix, doInstance=instance):
            return


        # COMPONENTS
        # we need to set some attrs on the group, as it's the storage obj
        self._group = cmds.createNode('joint', name=self._name + '_' + self._bfrSuffix, ss=1, p=parent)
        cmds.setAttr(self._group + '.drawStyle', 2)
        cmds.setAttr(self._group + '.radius', e=True, cb=False)
        cmds.setAttr(self._group + '.rotateOrder', e=True, cb=True)
        cmds.addAttr(self._group, ln='__metaDataControl__', dt='stringArray')

        # CREATE THE HIERARCHY
        # Create 1st control
        # Create offset controls if depth > 1
        # if the ctl ends with a digit, we insert a 'x'
        # finally, if a valid suffix has been given (i.e. 'ctl'),
        # we use it, otherwise we add it.     

        if not name.endswith('_' + NC['ctl']):
            for i in range(depth):  # loop through range [2, 3, ...]
                nb = str(i+1) if i != 0 else ''
                if i != 0 and name[-1].isdigit():
                    isEndingWithDigit = 'x'
                else:
                    isEndingWithDigit = ''
                self._addControl(name+isEndingWithDigit+nb)

        else:
            for i in range(depth):  # loop through range [2, 3, ...]
                nb = str(depth-i) if i != depth-1 else ''
                if i != depth-1 and name[-1].isdigit():
                    isEndingWithDigit = 'x'
                else:
                    isEndingWithDigit = ''
                self._addControl(name.replace('_' + NC['ctl'], '') + isEndingWithDigit + NC['ctl'] + nb)

        # set attributes
        self.shape       = self._shape
        self.color       = self._color
        self.size        = self._size
        self.rotateOrder = self._rotateOrder
        if match:
            self.match   = self._match
        self.keyable     = self._keyable
        self.lineWidth   = self._lineWidth
        self.tagNodes    = tagAsController
        self.sets         = self._sets

        if self._joint:
            self._joint = cmds.createNode('joint', n=self._name + '_' + self._jntSuffix, ss=True)
            cmds.parent(self._joint, self.topCtl, r=1)
            cmds.connectAttr(self.grp + '.rotateOrder', self._joint + '.rotateOrder')

        if loc:
            locShape = cmds.createNode('locator', ss=True, n=self.name + '_locShape', parent=self.topCtl)
            cmds.hide(locShape)

        # connect the rotate order of the group to every controller
        for ctl in self.ctls:
            cmds.setAttr(ctl + '.rotateOrder', edit=True, lock=False)
            cmds.connectAttr(self.grp + '.rotateOrder', ctl + '.rotateOrder')

    # ------------ CORE ------------
    def __repr__(self):
        if self._controls:
            return "{}('{}')".format(self.__class__.__name__,
                                     self._name)
        else:
            return object.__repr__(self)

    @staticmethod
    def _extractNiceName(name):
        '''
        Given a string, returns the correct name for this controller. For
        instance, if the user input is blablax2_CTL, because of a depth of 2,
        this function will return blabla. If the user gives xxxCtl_grp, this
        function will return xxx, and so on

        :param name: name provided by the user, usually the current maya
                     selection (so with a suffix)
        :type  name: str
        :return: correct nicename, without the suffix, or None if nothing has
                 been found
        :rtype : str or None
        '''
        # get a correct name, regardless what we selected in the hierarchy
        nicename = None
        if re.search('.+\dx\d+_CTL', name):
            # we selected a ctl ending with a digit, with a depth > 1
            s = re.search('(.+\d)(x\d+_CTL)', name)
            nicename = s.group(1)
        elif re.search('.+Ctl_grp', name) and \
             cmds.attributeQuery('__metaDataControl__', n=name, exists=True):
            # we selected a group
            s = re.search('(.+)Ctl_grp', name)
            nicename = s.group(1)
        else:
            # in order to check if we work on a ends-with-digit ctl or not, we
            # need to go one level upper
            # if the parent has blabla2x2_CTL suffix :
            parent = cmds.listRelatives(name, p=1)
            if not parent:
                # we don't work on a complex object, its parent is the world
                nicename = name
            else:
                parent = parent[0]
                if re.search('.+\dx\d+_CTL', parent):
                    s = re.search('(.+)(_CTL)', name)
                    nicename = s.group(1)
                else:
                    s = re.search('(.+[a-zA-Z])\d*_CTL', name)
                    if s:
                        nicename = s.group(1)
                    else:
                        nicename=name

        return nicename

    def _instanciateExistingObject(self, obj, suffix, doInstance):
        '''
        Checks if the object exists already. If it exists,
        we create an instance of this object instead of recreating
        an object
        '''

        if not obj.endswith('_' + NC[suffix]):
            obj = obj + '_' + NC[suffix]

        if not cmds.objExists(obj):
            return

        # get zero group
        iterObj = obj
        while not self._group:
            if iterObj.endswith('bfr'):
                self._group = iterObj
                break
            iterObj = cmds.listRelatives(iterObj, p=True)[0]

        # get child controls
        children = reversed(cmds.listRelatives(self._group, ad=True, type='transform'))
        # filter by name
        self._controls = [x for x in children if x.startswith(self._name) and x.endswith('_' + NC[suffix])]
        self._controlsShapes = [cmds.listRelatives(x, shapes=1, type='nurbsCurve')[0] for x in self._controls]
        #cm - py3
        # self._color = COLORS.keys()[COLORS.values().index(cmds.getAttr(self.topCtl + '.overrideColor'))]
        self._color = list(COLORS.keys())[cmds.getAttr(self.topCtl + '.overrideColor')]
       

        # metaDatas = json.loads(cmds.getAttr(self._group + '.__metaDataControl__')[0])
        metaDatas = self._readFromAttr()
        self._shape = metaDatas['shape']
        self._size = metaDatas['size']
        self._match = metaDatas['match']
        self._rotateOrder = self._rotateOrderIntToStr[cmds.getAttr(self._group + '.rotateOrder')]
        self._keyable = cmds.listAttr(self._controls[0], k=1)
        self._depth = len(self._controls)
        self._tagNode, self._tagParent = None, None
        self._tagNode = cmds.listConnections(self.ctls[0] + '.message', s=0, d=1, type='controller')
        if self._tagNode:
            self._tagNode = self._tagNode[0]
            self._tagParent = cmds.listConnections(self._tagNode + '.parent', s=0, d=1, type='controller')
            if self._tagParent:
                self._tagParent = self._tagParent[0]

        if not doInstance:
            LOG.info('The object ' + self.name + ' exists already. It has been re-instanciated')

        return True
   
    def _setColorFromName(self, name):
        '''
        based on the prefix of the name, returns an index corresponding
        to the color
        '''
        if name.startswith('C_'):
            return 'yellow'
        if name.startswith('L_'):
            return 'fluoBlue'
        if name.startswith('R_'):
            return 'fluoRed'
        if name.startswith('Lf_'):
            return 'pastelBlue'
        if name.startswith('Rf_'):
            return 'pastelRed'
        if name.startswith('Lm_'):
            return 'lightBlue'
        if name.startswith('Rm_'):
            return 'flesh'
        if name.startswith('Lb_'):
            return 'darkBlue'
        if name.startswith('Rb_'):
            return 'darkRed'
        return 'default'
   
    def _addControl(self, name):
        '''
        Create new control, without a shape
        :param   name: naming prefix
        :type    name: str
        :param parent: dag hierarchy parent object
        :type  parent: str
        :return: new control name
        :rtype: str
        '''
        pattern = NC['ctl'] + '(\d+)?$'
        if not re.search(pattern, name):
            name = name + '_' + NC[self._ctlSuffix]

        if cmds.objExists(name):
            raise RuntimeError('A control named '+name+' already exists.')
        parent = self._controls[-1] if self._controls else self._group

        transform = cmds.createNode('joint', name=name, parent=parent, ss=True)
        cmds.setAttr(transform + '.radius', e=True, cb=False)
        cmds.setAttr(transform + '.ro', e=1, k=1)
        cmds.setAttr(transform + '.overrideEnabled', 1)
        cmds.setAttr(transform + '.drawStyle', 2)

        self._lockHide(transform, self._keyable)

       
        # save attributes
        self._controls.append(transform)
        return transform
   
    def _lockHide(self, obj, attrs = '', lock=True, hide=True):
        # check
        if not cmds.objExists(obj):
            LOG.info('fAttr.lockHide : the given object ' + obj + ' doesn\'t exist')
        # filter the data
        attrs = attrs if isinstance(attrs, list) else [attrs]

        for attr in attrs[::-1]:
            if set(attr) == set('trs'):
                attrs.remove(attr)
                attrs += ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ', 'scaleX', 'scaleY', 'scaleZ']
            if set(attr) == set('tr'):
                attrs.remove(attr)
                attrs += ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ']
            if set(attr) == set('rs'):
                attrs.remove(attr)
                attrs += ['rotateX', 'rotateY', 'rotateZ', 'scaleX', 'scaleY', 'scaleZ']
            if set(attr) == set('ts'):
                attrs.remove(attr)
                attrs += ['translateX', 'translateY', 'translateZ', 'scaleX', 'scaleY', 'scaleZ']
            if attr == 'default' or attr == '':
                attrs.remove(attr)
                attrs += ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ', 'scaleX', 'scaleY', 'scaleZ']
            if attr == 't':
                # attrs.remove(attr)
                attrs = ['translateX', 'translateY', 'translateZ']
            if attr == 'r':
                # attrs.remove(attr)
                attrs = ['rotateX', 'rotateY', 'rotateZ']
            if attr == 's':
                # attrs.remove(attr)
                attrs = ['scaleX', 'scaleY', 'scaleZ']
            if attr == 'all':
                attrs.remove(attr)
                attrs += ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ', 'scaleX', 'scaleY', 'scaleZ', 'visibility']
       
        # locks and hide everything
        try:[cmds.setAttr(obj + '.' + attr, l=1, k=0) for attr in cmds.listAttr(obj, k=1)]
        except TypeError:pass
        # then display and unlock only the ones we want
        for attr in attrs:
            if attr != 'rotateOrder' and attr != 'ro':
                cmds.setAttr(obj + '.' + attr, l=lock, k=not hide)
            else:
                cmds.setAttr(obj + '.' + attr, l=lock, k=not hide, cb=not hide)
        return attrs
   
    def _writeInAttr(self):
        '''
        Writes the current dictionary of values for shape, size and match
        into an attribute __metaDataControl__ on the root group
        '''
        dictToWrite = {'shape':self._shape,
                       'size':self._size,
                       'match':self._match}
        plug  = MGlobal.getSelectionListByName(self._group + '.__metaDataControl__').getPlug(0)
        dummy = MFnStringArrayData().create([json.dumps(dictToWrite)])
        plug.setMObject(dummy)
   
    def _readFromAttr(self):
        '''
        Reads the info from the __metaDataControl__ attribute
        '''
        sel=MGlobal.getSelectionListByName(self._group + '.__metaDataControl__')
        plug=sel.getPlug(0)
        fn=MFnStringArrayData(plug.asMObject())
        return json.loads(fn.array()[0])

    # ------------ ACCESSORS ------------
    def delete(self):
        '''
        When deleting a controller, make sure we delete the
        tag node associated to it as well, if it exists
        '''
        toDelete = [self.grp]
        if self.tagNodes:
            toDelete.extend(self.tagNodes)
        if self.sets:
            for s in self._sets:
                cmds.sets(self._controls, rm=s)
        cmds.delete(toDelete)

    @property
    def name(self):
        return self._name
    @name.setter
    def name(self, value):
        ''' Renames all the elements of the system '''
        name = value.replace('_' + NC['ctl'], '') if value.endswith('_' + NC['ctl']) else value
        if name == self._name:return

        oldName = self._name
        self._name = value
        # work on the list reversed in order to rename the shapes first
        for i, e in enumerate(self._controlsShapes):
            self._controlsShapes[i] = cmds.rename(e, e.replace(oldName, self._name))
            # self._controlsLocs[i] = cmds.rename(e, e.replace(oldName, self._name))
        for i, e in enumerate(self._controls):
            self._controls[i] = cmds.rename(e, e.replace(oldName, self._name))
        self._group = cmds.rename(self._group, self._group.replace(oldName, self._name))
   
    @property
    def shape(self):
        '''shape property for getting and setting type of shape'''
        return self._shape
    @shape.setter
   
    def shape(self, value):
        '''
        If the value is different from the current shape, sets the shape of the
        controllers, by drawing a curve based on SHAPES dictionnary,
        reparenting the shape of this curve to the ctl, and deleting the empty
        transform curve node
        '''
        # if the sender is self.size, value has 2 values, shape and size
        # because it's easier to redraw the shape than to scale all the points
        # if the sender is not self.size, value is just 1 value, the shape
        selection = cmds.ls(sl=1)
        try:
            shape, size = value
        except (ValueError, TypeError):
            shape = value
            size = self._size or 1
        # ------ performs some checks ------
        # if the same shape than the current one in the scene
        # is given, we ignore it, except if it comes from the init
        if self._shape == shape and self._size == size and \
        cmds.listRelatives(self._controls[0], shapes=1, type='nurbsCurve'):
            return

        if shape not in SHAPES.keys():
            LOG.warning(self._name + ' -> ' + str(shape) + ' is not an available shape (yet...). Circle will be used instead')
            shape = 'circle'

        if not isinstance(size, list):
            # size = [size] * len(self._controls)
            size=[size-i/10. for i in range(len(self._controls))]
        if isinstance(size, list):
            if len(size) < len(self._controls):
                # expand the size -> adds n times the lastElement
                size.extend([size[-1]]*(len(self._controls)-len(size)))
            elif len(size) > len(self._controls):                
                # shrink the size - get rid of the n extra elements
                size = size[:-len(size)-len(self._controls)]


        self._shape = shape
        degree = SHAPES[shape]['degree']
        knots  = MDoubleArray(SHAPES[shape]['knots'])
        # points = MPointArray(SHAPES[shape]['points'])

        # degree = SHAPES[shape]['degree']
        # knots  = SHAPES[shape]['knots']
        points = SHAPES[shape]['points']
        form   = SHAPES[shape].get('form', MFnNurbsCurve.kOpen)
        # if isinstance(form, int):
        #     if form == 0:

        # clear the controlShapes lit
        del self._controlsShapes[:]
        # 1.39478397369 pour 200 iterations
        # 1.02866292 avec la version api

        fnCrv = MFnNurbsCurve()
        for i, ctl in enumerate(self._controls):
            # delete the previous shape if exists
            shapes = cmds.listRelatives(ctl, shapes=1)
            if shapes:
                oldCurveShape = [x for x in shapes if cmds.nodeType(x) == 'nurbsCurve']
                if oldCurveShape:
                    cmds.delete(oldCurveShape)
            # size
            resizedPts = MPointArray([[x*size[i] for x in point] for point in points])
           
            # core
            parent = MGlobal.getSelectionListByName(ctl).getDependNode(0)
            x      = fnCrv.create(resizedPts, knots, degree, form,
                                  False, # 2d curve
                                  True,  # rational curve
                                  parent)
            newCurveShape = fnCrv.setName(ctl + '_CRVShape')

            # save the shapes
            self._controlsShapes.append(newCurveShape)

        # restores the previous color
        self.color = self._color
        # writes the new dict on the attribute
        self._writeInAttr()
        # restores the selection
        cmds.select(selection, r=1) if selection else cmds.select(cl=1)
    
    @property
    def color(self):
        '''color property for getting and setting color'''
        return self._color

    @color.setter
    def color(self, value):
        '''
        Sets the given color for all the controllers
        A string can be given, but also an int
        '''
        if isinstance(value, (str, string_types)):
            if self._color not in COLORS.keys():
                raise AttributeError('{0} : no {1} found in the color dict'.format(self.name, self._color) )

            self._color = value
            for ctl in self.ctls:
                cmds.setAttr(ctl + '.overrideColor', COLORS[self._color])
        elif isinstance(value, int):
            self._color = COLORS.keys()[COLORS.values().index(value)]
            for ctl in self.ctls:
                cmds.setAttr(ctl + '.overrideColor', COLORS[self._color])
        elif isinstance(value, (list, tuple, set)):
            assert len(value) == 3, 'Wrong number of arguments : please provide 3 values (rgb)'
            for ctl in self.ctls:
                cmds.setAttr(ctl + '.overrideRGBColors', 1)
                for i, channel in enumerate('RGB'):
                    cmds.setAttr(ctl + '.overrideColor' + channel, value[i])

        else:
            raise ValueError('wrong type of argument given. You need to provide '
                'either a str/unicode (e.g. \'yellow\', \'fluoRed\', etc) or '
                'an int, corresponding to the maya index of your color')
   
    @property
    def size(self):
        '''size property for getting and setting shape size'''
        return self._size
    
    @size.setter
    def size(self, value):
        self.shape = (self._shape, value)
        self._size = value
        self._writeInAttr()
   
    @property
    def rotateOrder(self):
        '''returns the current rotateOrder'''
        return cmds.getAttr(self.grp + '.rotateOrder', asString=True)
    
    @rotateOrder.setter
    def rotateOrder(self, value):
        '''
        Sets the rotate order attribute on the zeroGrp. It'll be propagated
        to the children, as they're all connected to the zeroGrp.rotateOrder
        A string value can be given, but also an int value.
        '''
        # try:
        if any([isinstance(value, str), isinstance(value, string_types)]):
            self._rotateOrder = value
            if cmds.getAttr(self.grp + '.ro', l=1):
                cmds.setAttr(self.grp+'.ro', l=0)
                cmds.setAttr(self.grp + '.ro', self._rotateOrderStrToInt[value])
                cmds.setAttr(self.grp+'.ro', l=1)
            else:
                cmds.setAttr(self.grp + '.ro', self._rotateOrderStrToInt[value])
        elif isinstance(value, int):
            self._rotateOrder = self._rotateOrderIntToStr[value]
            if cmds.getAttr(self.grp+'.ro', l=1):
                cmds.setAttr(self.grp+'.ro', l=0)
                cmds.setAttr(self.grp + '.ro', value)
                cmds.setAttr(self.grp+'.ro', l=1)
            else:
                cmds.setAttr(self.grp + '.ro', value)
        else:
            raise AttributeError('Value must be int or str')

    @property
    def keyable(self):
        '''keyable property for getting and setting keyable attributes'''
        if not hasattr(self, '_keyable'):
            self._keyable = cmds.listAttr(self._controls[0], k=1)
        return self._keyable
    
    @keyable.setter
    def keyable(self, value):
        '''
        Set the keyable channels
        You can use
        ctl.keyable = 'tsr'
        ctl.keyable = ['t']
        ctl.keyable = 'default' # tr, rot, sc
        ctl.keyable = 'all' # tr, rot, sc, visib
        ctl.keyable = ('tsr', False) # locks / hides
        etc...
        '''
        if isinstance(value, str):
            attr = value
            l = True
        else:
            try:
                attr, l = value
            except ValueError:
                attr = value
                l = True

        attr = attr if isinstance(attr, list) else [attr]
        for ctl in self._controls:
            attrs = self._lockHide(ctl, attr, lock=not l, hide=not l)
        self._keyable = attrs
   
    @property
    def depth(self):
        obj = self.grp
        depth = 0
        while True:
            child = cmds.listRelatives(obj, type='transform')
            if child:
                if self.name in child[0] and child[0].endswith('_' + NC['ctl']):
                    depth += 1
                    obj = child
                else:
                    break
            else:
                break
        self._depth = depth
        return self._depth
   
    @depth.setter
    def depth(self, value):
        ''' Sets the depth of the controller, i.e. the number of subCtls '''
        # if value == self.depth:return  # no need to do anything
        # make sure we keep track of what could be parented to this ctl
        children = [x for x in cmds.listRelatives(self.topCtl, children=True) if cmds.nodeType(x) not in ('nurbsCurve', 'locator')]
        if children:
            cmds.parent(children, world=True)
        cmds.delete(self.rootCtl)
        self._controls = []
        for i in range(value):  # loop through range [2, 3, ...]
                nb = str(value-i) if i != value-1 else ''
                if i != value-1 and self.name[-1].isdigit():
                    isEndingWithDigit = 'x'
                else:
                    isEndingWithDigit = ''
                self._addControl(self.name.replace('_' + NC['ctl'], '') +
                                 isEndingWithDigit + nb + '_' + NC['ctl'])
        # re-parent what was parented before
        if children:
            cmds.parent(children, self.topCtl)
           
        self.shape = self._shape
        self.keyable = self._keyable
        self._depth = value
   
    @property
    def match(self):
        '''match property for getting and setting a transform to match to'''
        return self._match
   
    @match.setter
    def match(self, value):
        '''
        Updates the match value, but does not match the _group to the given
        value
        '''
        masterMat = MMatrix(cmds.getAttr(value + '.wm'))
        parentGroupInvMat = MMatrix(cmds.getAttr(self._group+ '.parentInverseMatrix'))
        mat = MTransformationMatrix(masterMat * parentGroupInvMat)
        tr  = mat.translation(MSpace.kWorld)
        rot = mat.rotation()
        sc  = mat.scale(MSpace.kWorld)
        cmds.setAttr(self._group + '.r', *[math.degrees(x) for x in (rot.x, rot.y, rot.z)])
        cmds.setAttr(self._group + '.t', tr.x, tr.y, tr.z)
        cmds.setAttr(self._group + '.s', *sc)

        self._match = value
        self._writeInAttr()
   
    @property
    def lineWidth(self):
        return self._lineWidth if hasattr(self, '_lineWidth') else cmds.getAttr(self.ctlShapes[0] + '.lineWidth')
    @lineWidth.setter
    def lineWidth(self, value):
        '''Do it only if the attr exists (i.e. maya version > 2015)'''
        for x in self.ctlShapes:
            if cmds.attributeQuery('lineWidth', n=x, exists=True):
                cmds.setAttr(x + '.lineWidth', value)
        self._lineWidth = value
   
    @property
    def tagParent(self):
        return self._tagParent
    @tagParent.setter
    def tagParent(self, value):
        '''
        Creates a parent/child relationship with the given object, available
        via pickWalk.
        :param value: object which will be the parent
        :type  value: str
        '''
        # make sure the value provided is of type controller. If not, create
        # and attach a controller node
        self._tagParent = value
        if cmds.nodeType(value) != 'controller':
            # make sure there is no controller node connected already
            existingNodes = [x for x in cmds.listConnections(value + '.message', s=0, d=1) or [] if cmds.nodeType(x) == 'controller']
            if len(existingNodes) > 1:
                raise TypeError('Unable to find the controller node. Please provide a more accurate value')

            # if not, let's create it
            self._tagParent = existingNodes[0] if len(existingNodes) == 1 else cmds.createNode('controller', n=value + '_tag', ss=1)
            cmds.connectAttr(value + '.message', self._tagParent + '.controllerObject')

        # create the setup for this node
        if self._tagNode is None:
            # create the tag on the current controller
            self._tagNode = cmds.createNode('controller', n=self.name + '_tag', ss=1)
            cmds.connectAttr(self.topCtl + '.message', self._tagNode + '.controllerObject')
            # create the dependency (pickwalk)
            num_previous_connections = len(cmds.listConnections(self._tagParent +
                                       '.children', s=1, d=0) or [])
            cmds.connectAttr(self._tagNode + '.parent', self._tagParent +
                             '.children['+ num_previous_connections + ']')
   
    @property
    def tagNodes(self):
        '''
        Returns the tag node (the maya node, of type "controller")
        that is used to override the pickwalk.
        Unlike the tagParent node, which can be any DAG object, this tagNode
        is a maya controller node, used only to make the tagging system work
        '''
        tags = []
        for ctl in self.ctls:
            tag = cmds.listConnections(ctl + '.message', s=0, d=1,
                                       type='controller') or []
            if not tag:
                # LOG.warning('One controller node is missing, on ' + ctl + ', that is unusual, you might want to check your setup')
                continue
            tags.extend(tag)
        return tags
    
    @tagNodes.setter
    def tagNodes(self, value):
        '''
        Adds or remove a controller node to the topCtl of this Control
        :param value: whether we want to add or to remove the tag node(s)
        :type  value: bool
        '''
        tagNodes = []
        if value == True:
            # add a tag on each shape and parent them together
            for i, ctl in enumerate(self.ctls):
                cmds.controller(ctl)
                tag = cmds.listConnections(ctl + '.message', type='controller')[0]
                cmds.addAttr(tag, ln='childrenDelayed', at='message', multi=True)
                if i>0:
                    # cmds.controller(ctl, self.ctls[i-1], p=True)
                    cmds.connectAttr(tag + '.parent', tagNodes[-1] + '.childrenDelayed[0]')
                    cmds.connectAttr(tagNodes[-1] + '.prepopulate', tag + '.prepopulate')
                tagNodes.append(tag)
        elif value == False:
            nodes = self.tagNodes
            if nodes:
                cmds.delete(node)
   
    @property
    def loc(self):
        '''
        Returns the loc shape parented to the top controller if exists
        '''
        children = cmds.listRelatives(self.topCtl, shapes=True, type='locator')
        return children[0] if children else None
   
    @property
    def worldPos(self):
        '''Returns a plug to the locator's worldPosition'''
        if self.loc:
            return self.loc + '.worldPosition'
        else:
            raise AttributeError('No locator found under ' + self.__repr__() + ', no worldPosition available')
   
    @property
    def ctls(self):
        return self._controls
   
    @property
    def ctlShapes(self):
        return self._controlsShapes

    @property
    def suffix(self):
        return self._ctlSuffix

    @property
    def topCtl(self):
        return self._controls[-1]
   
    @property
    def rootCtl(self):
        return self._controls[0]
   
    @property
    def grp(self):
        return self._group
   
    @property
    def jt(self):
        jt = cmds.listRelatives(self.topCtl, children=True, type='joint')
        return jt[0] if jt else None
   
    @property
    def sets(self):
        if not hasattr(self, '_sets'):
            self._sets = [x for x in cmds.listConnections(self.topCtl + '.instObjGroups[0]', s=0, d=1) if cmds.nodeType(x) == 'objectSet']
        return self._sets
   
    @sets.setter
    def sets(self, value):
        if not value:return
        value = value if isinstance(value, (list, tuple, set, frozenset)) else [value]
        if any([not cmds.objExists(x) for x in value]):
            raise NameError('One or more of the given sets ('+ ', '.join(value) + ') don\'t exist')
        for v in value:
            cmds.sets(self.ctls[::-1], addElement=v)
        self._sets = list(set(self._sets + value))

def replaceCtlShape(newCtrl=None, oldCtrls=[]):
    '''
    Replace a control shape(s) with an other control shape(s).

    :param newCtrl: ctl to apply.
    :type  newCtrl: str
    :param oldCtrls: ctl to replace
    :type  oldCtrls: list
    :return : None
    '''
    selected = cmds.ls(sl=1)
    if len(selected) < 2:
        raise AttributeError('Please select at least 2 controlers, the new, and the one(s) you want to replace')

    if not newCtrl:
        newCtrl = selected[0]

    if not oldCtrls:
        selected.remove(newCtrl)
        oldCtrls = selected

    for oldCtrl in oldCtrls:
        # duplicate template ctl
        newCopy = cmds.duplicate(newCtrl)
        newCopy = cmds.rename(newCopy, 'newCtrl')

        # unlock new ctrl
        for axis in 'xyz':
            cmds.setAttr(newCopy + '.t' + axis, l=0)
            cmds.setAttr(newCopy + '.r' + axis, l=0)

        cmds.delete(cmds.parentConstraint(oldCtrl, newCopy, mo=0))
        cmds.delete(cmds.listRelatives(oldCtrl, s=1))

        # Attach new shapes to ctrl.
        newShapes = cmds.listRelatives(newCopy, s=True)
        cmds.parent(newShapes, oldCtrl, r=True, s=True)

        # Rename shapes.
        for i, shape in enumerate(newShapes):
            if i == 0:
                cmds.rename(shape, oldCtrl + 'Shape')
            else:
                cmds.rename(shape, oldCtrl + str(i) + 'Shape')

        # del the empty ctl
        cmds.delete(newCopy)

    # and the template ctl
    cmds.delete(newCtrl)

def linkVisib(driver, ctl, dv=1, onShapes=False):
    '''
    Creates and connects an attribute on the visibility of the n controllers given
    :param driver: object on which we'll add the control attribute to
                   enable/disable the visibility
    :type   driver: str
    :param     ctl: controller that will have his depth visib driven
    :type      ctl: Control
    :param      dv: default value for the attribute"
    :type       dv: int
    :param onShape: if on, the visib will be on the shapes, not on the transform
                    Which means you can parent elements to the controllers
                    without worrying of the ctl being hidden. This is (probably)
                    slower than when it's off
    :type  onShape: bool
    '''
    # - create the attribute
    attrName = ctl.name + '_depth'
    cmds.addAttr(driver, ln=attrName, at='long', min=1, max=ctl.depth,
                         dv=dv, k=1)
    cmds.setAttr(driver + '.' + attrName, e=1, k=0, cb=1)

    # - connect it to the visibility
    if onShapes:
        depth = ctl.depth
        remap = cmds.createNode('remapValue', ss=True,
                                n=ctl.name + '_depthVisib_' + NC['rmv'])
        cmds.connectAttr(driver + '.' + attrName, remap + '.inputValue')
        cmds.setAttr(remap + '.inputMax', depth)

        for i, c in enumerate(ctl.ctlShapes[1:]):
            rmp = cmds.createNode('ramp', ss=True,
                        n=ctl.name + '_depthVisib' + str(i) + '_' + NC['rmp'])
            cmds.connectAttr(remap + '.outValue', rmp + '.colorEntryList[1].position')
            cmds.setAttr(rmp + '.vCoord', (i+1) / float(depth))
            cmds.setAttr(rmp + '.colorEntryList[1].color', 0,0,0, type='double3')
            cmds.setAttr(rmp + '.colorEntryList[0].position', 0)
            cmds.setAttr(rmp + '.colorEntryList[0].color', 1,1,1, type='double3')
            cmds.setAttr(rmp + '.interpolation', 0)
            cmds.connectAttr(rmp + '.outColorR', c + '.v')
    else:
        for i, c in enumerate(ctl.ctls[1:]):
            adl = cmds.createNode('addDoubleLinear', ss=True,
                            n=ctl.name + '_depthVisib_' + NC['adl'])
            cmds.connectAttr(driver + '.' + attrName, adl + '.input1')
            cmds.setAttr(adl + '.input2', -(i+1))
            cmds.setAttr(c + '.v', l=0)
            cmds.connectAttr(adl + '.output', c + '.v')

def mirrorCtlShapes(ctl, axis='x', search='L_', replace='R_', doColor=True):
    '''
    Mirror the given curve (usually a controller) on the specified axis
   
    :param str     ctl: object one wants to mirror (can be a list of objs)
    :param str    axis: axis on which we want to perform the mirror
    :param str  search: pattern we want to search for
    :param str replace: pattern we want to replace
    '''

    curves = ctl if isinstance(ctl, list) else [ctl]

    # filter the input to check whether it's a transform or a shape
    crv_shapes = []
    for c in curves:
        if cmds.nodeType(c) == 'nurbsCurve':
            crv_shapes.append(c)
            continue
        if cmds.nodeType(c) == 'transform' or cmds.nodeType(c) == 'joint':
            crv_shapes += cmds.listRelatives(c, s=1, ni=1, type='nurbsCurve')

    crv_shapes = list(set(crv_shapes))  # removes duplicates

    for crv_shape in crv_shapes:
        if not search in crv_shape:
            LOG.warning('pattern not found in ' + crv_shape + ', skipping...')
            continue

        crv_transform    = cmds.listRelatives(crv_shape, p=1)[0]
        mirror_shape     = crv_shape.replace(search, replace, 1)
        mirror_transform = cmds.listRelatives(mirror_shape, p=1)[0]

        # make sure the shape doesn't have an input connection
        inConnection = cmds.listConnections(mirror_shape + '.create', s=1, d=0)
        if inConnection:
            LOG.warning('Input connection found on {0}.create, skipping tis object'.format(mirror_shape))
            continue

        # do the mirroring setup
        mtx = cmds.createNode('fourByFourMatrix', ss=1)
        attr = filter(None, [x*y for x, y in zip(['.in00', '.in11', '.in22'],
                                             [axis in x for x in 'xyz'])])[0]
        cmds.setAttr(mtx + attr, -1)

        # mirror in object space
        mirror = cmds.createNode('transformGeometry', ss=1, n='mirror')
        cmds.connectAttr(crv_shape + '.worldSpace', mirror + '.inputGeometry')
        cmds.connectAttr(mtx + '.output', mirror + '.transform')

        # localize (cancel the input transforms)
        inv_rot_ctlShape = cmds.createNode('decomposeMatrix', ss=1)
        cpm = cmds.createNode('composeMatrix', ss=1)
        localize = cmds.createNode('transformGeometry', ss=1)
        cmds.connectAttr(crv_transform + '.worldInverseMatrix', inv_rot_ctlShape + '.inputMatrix')
        cmds.connectAttr(inv_rot_ctlShape + '.outputRotate', cpm + '.inputRotate')
        cmds.connectAttr(mirror + '.outputGeometry', localize + '.inputGeometry')
        cmds.connectAttr(cpm + '.outputMatrix', localize + '.transform')
       
        # reorient like the mirrored transform
        dcm = cmds.createNode('decomposeMatrix', ss=1)
        mirror_rot = cmds.createNode('composeMatrix', ss=1)
        inv_rot = cmds.createNode('inverseMatrix', ss=1)
        mirror_tg = cmds.createNode('transformGeometry', ss=1)

        cmds.connectAttr(mirror_transform + '.worldInverseMatrix', dcm + '.inputMatrix')
        cmds.connectAttr(dcm + '.outputRotate', mirror_rot + '.inputRotate')
        cmds.connectAttr(mirror_rot + '.outputMatrix', inv_rot + '.inputMatrix')
        cmds.connectAttr(localize + '.outputGeometry', mirror_tg + '.inputGeometry')
        cmds.connectAttr(inv_rot + '.outputMatrix', mirror_tg + '.transform')

        # connect to the dummy curve
        cmds.connectAttr(mirror_tg + '.outputGeometry', mirror_shape + '.create')
        cmds.refresh()
        cmds.disconnectAttr(mirror_tg + '.outputGeometry', mirror_shape + '.create')
       
        # do the linewidth
        cmds.setAttr(mirror_shape + '.lineWidth', cmds.getAttr(crv_shape + '.lineWidth'))

        # and the color if we want to do it
        if doColor:
            cmds.setAttr(mirror_shape + '.overrideRGBColors', cmds.getAttr(crv_shape + '.overrideRGBColors'))
            cmds.setAttr(mirror_shape + '.overrideColor', cmds.getAttr(crv_shape + '.overrideColor'))
            cmds.setAttr(mirror_shape + '.overrideColorRGB', *cmds.getAttr(crv_shape + '.overrideColorRGB')[0])

        # cleans everything
        cmds.delete(mirror, inv_rot_ctlShape, cpm, localize, dcm, mirror_rot, inv_rot, mirror_tg)

def locatorizeCtl(ctl):
    '''
    With a given control curve, creates and parents a locator shape.
    Returns the name of the transform node
    '''
    locator = cmds.spaceLocator()[0]
    vtCommon.snapTo(ctl, locator)
    shapes = parentShape.ParentShape.core(ctl, locator)
    # fDebug.fPrint(cmds.listRelatives(transformNode, shapes=True))
    try:
        # [cmds.setAttr(sh + '.v', 0) for sh in cmds.listRelatives(transformNode, shapes=True) if cmds.nodeType(sh) == 'locator']
        [cmds.setAttr(sh + '.v', 0) for sh in shapes if cmds.nodeType(sh) == 'locator']
    except RuntimeError:
        LOG.error('More than 1 object match name ' + sh + ', you probably already have a controller with the same name in your scene')
    return cmds.listRelatives(shapes[0], p=True)[0]

def overrideColor(obj,cO=None):
    '''
    Provides a value for overriding color of a controller.
    If no cO is given, try to guess the color using the name of the object,
    else, sets the color to what the user gave.
    Returns the color, as an int
    '''
    from maya.cmds import listRelatives,setAttr # import locally
    if isinstance(cO, bool) or not cO:
        if '_m_' in obj:
            cO = 17
        elif '_l_' in obj:
            cO = 13
        elif '_r_' in obj:
            cO = 6
    if cO:
        if isinstance(cO, int):
            objShape = listRelatives(obj,c=True,s=True,ni=True)[0] if listRelatives(obj,c=True,s=True,ni=True) else obj
            cmds.setAttr(objShape+'.overrideEnabled',True)
            cmds.setAttr(objShape+'.overrideColor', cO)
        elif isinstance(cO, list):
            objShape = listRelatives(obj,c=True,s=True,ni=True)[0] if listRelatives(obj,c=True,s=True,ni=True) else obj
            cmds.setAttr(objShape+'.overrideEnabled',True)
            cmds.setAttr(objShape+'.overrideRGBColors', 1)
            cmds.setAttr(objShape+'.overrideColor', cO)